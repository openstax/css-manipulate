/* TODO: Log each error message text for diffing later */
::explode { content: "invalid pseudo-element"; }
:expode { content: "invalid pseudo-class"; }
body { content: invalid-function(); }
/*body::after(non-numeric-arg) { content: "bug"; }*/
body { attrs-add: 'data-with-no-value'; }
/*::after(non-numeric-arg) { content: "bug"; }*/
body { content: ancestor-context('invalid-element-name', text-content()); }
body::for-each-descendant(123,) { content: "no 2nd arg specified"; }
/*body::for-each-descendant(1,0) { content: "2nd arg must be a string"; }*/
/*body::for-each-descendant(1, '.no-matches') { content: "no elements were matched (may become a warning)"; }*/
/*body { contentssss: "bug"; }*/
body { content: attr(hreffooo); } /* non-existant attribute */
body { x-throw: now; }
body { x-throw: later; }
body { x-throw: attr(href); }
body { content: x-throw(); }
body { content: attr(non-existent-attribute); }
body { content: descendant-context('.nothing-matches', attr(href)); }
body { content: ancestor-context('.nothing-matches', attr(href)); }
body { content: target-context('.not-an-href', attr(href)); }
body { content: add(); }
body { content: add('not a number1'); }
body { content: add(234, 'not a number2'); }
body { content: add('not a number3', 345); }
body { content 'kittens'; } /* CSS Parsing Error. Missing colon */
