const fs = require('fs')
const path = require('path')
const jsdom = require('jsdom')
const jquery = require('jquery')
const {argv} = require('yargs')
const ProgressBar = require('progress')
const {SourceMapGenerator} = require('source-map')

const map = new SourceMapGenerator()
const preMap = []


// const originalPath = argv._[0]
// const convertedPath = argv._[1]
const [originalPath, convertedPath] = argv._

if (!originalPath) {
  console.error('This script takes 2 XML/HTML files and attempts to build a sourcemap file between the two by matching id attributes.')
  console.error('It is not precise but it is hopefully "close enough" to be useful')
  console.error('')
  console.error('Missing original HTML path commandline argument')
  process.exit(1)
}
if (!convertedPath) { console.error('Missing converted HTML path commandline argument'); process.exit(1) }

const sourceMapPath = `${convertedPath}.map`
const sourceMapFileName = `${path.basename(sourceMapPath)}`
console.log('reading converted HTML')
const convertedContent = fs.readFileSync(convertedPath).toString() // loaded in-mem so we can add the sourceMappingURL comment
console.log('reading original HTML')
const originalContent = fs.readFileSync(originalPath).toString()
console.log('parsing original HTML')
const domOriginal = jsdom.jsdom(originalContent)
console.log('parsing converted HTML')
const domGenerated = jsdom.jsdom(convertedContent)

const originalFilename = path.basename(originalPath)

const $original = jquery(domOriginal.defaultView)
const $generated = jquery(domGenerated.defaultView)


let lastGeneratedLine = 1
let lastOriginalLoc = null
const $generatedElsWithId = $generated('[id]')
const total = $generatedElsWithId.length
const bar = new ProgressBar('[:bar] :count/:total :percent% :etas :rate/s', {total: total})
$generatedElsWithId.each((index, el) => {
  bar.tick()
  // if (index > 1000) {
  //   return
  // }
  const id = $generated(el).attr('id')
  let $originalEl
  // autogenerated pages have only a uuid and that is not a valid attribute value
  const originalEl = domOriginal.getElementById(id)
  if (!originalEl) {
    return
  }
  $originalEl = $original(originalEl)
  // try {
  //   $originalEl = $generated(`#${id}`)
  // } catch (e) {
  //   $originalEl = $generated(`[id="${id}"]`) // TODO: easybake generated UUID's for id's
  //   // $originalEl = $generated(`never-a-valid-element`)
  // }
  if ($originalEl.length == 1) {
    // generate sourcemap entry
    const generatedLoc = jsdom.nodeLocation(el)
    const originalLoc = jsdom.nodeLocation($originalEl[0])

    if (lastOriginalLoc) {
      while(lastGeneratedLine < generatedLoc.line) {
        map.addMapping({
          source: originalFilename,
          original: {line: lastOriginalLoc.line, column: lastOriginalLoc.col},
          generated: {line: lastGeneratedLine, column: 0},
        })
        lastGeneratedLine += 1
        console.log('lastGeneratedLine', lastGeneratedLine)
      }
    }
    lastOriginalLoc = originalLoc
    map.addMapping({
      source: originalFilename,
      original: {line: originalLoc.line, column: originalLoc.col},
      generated: {line: generatedLoc.line, column: generatedLoc.col},
    })
  }

  // check for href links to match them up too
})


console.log(`Retroactively adding sourceMappingURL to ${convertedPath}. If you run this script multiple times you may need to remove older entris from the file`)
fs.writeFileSync(convertedPath, `${convertedContent}\n<!-- //# sourceMappingURL=${sourceMapFileName} -->`)
fs.writeFileSync(sourceMapPath, map.toString())
