const chalk = require('chalk')
// const jsdom = require('jsdom')

const sourceColor = chalk.dim
const errorColor = chalk.red
const warnColor = chalk.yellow
const logColor = chalk.blue

let _console = console
let _htmlSourceLookup
let _htmlSourcePath
let _options = {}
let _hasBeenWarned = false

function init(consol, htmlSourceLookup, htmlSourcePath, options) {
  _console = consol
  _htmlSourceLookup = htmlSourceLookup
  _htmlSourcePath = htmlSourcePath
  _options = options
}

function cssSnippetToString(cssSnippet) {
  // matches input format for https://github.com/feross/snazzy
  if (cssSnippet && cssSnippet.loc) {
    // Commented out the end lookup because when the CSS ast is rewritten with the original source coordinates this data is not present most of the time
    const {source: cssSourcePath, start: {line: startLine, column: startColumn}/*, end: {line: endLine, column: endColumn}*/} = cssSnippet.loc
    return `${cssSourcePath}:${startLine}:${startColumn}`
  } else {
    return `unknown:0:0: [BUG: Invalid cssSnippet] ${JSON.stringify(cssSnippet)}`
  }
}

function constructSelector(el) {
  if (!el) {
    return 'NULL'
  } else if (el.tagName.toLowerCase(el) === 'html') {
    return 'html'
  } else if (el.tagName.toLowerCase(el) === 'body') {
    return 'body'
  } else if (el.hasAttribute('id')) {
    return `${el.tagName.toLowerCase()}#${el.getAttribute('id')}`
  } else if (el.className) {
    return `${constructSelector(el.parentElement)} > ${el.tagName.toLowerCase()}.${el.className.split(' ').join('.')}`
  } else if (el.hasAttribute('data-type')) {
    return `${constructSelector(el.parentElement)} > ${el.tagName.toLowerCase()}[data-type="${el.getAttribute('data-type')}"]`
  } else {
    return `${constructSelector(el.parentElement)} > ${el.tagName.toLowerCase()}`
  }
}

// Generate pretty messages with source lines for debugging
function createMessage(message, cssSnippet, $el) {
  let cssInfo = cssSnippetToString(cssSnippet)
  if ($el && $el[0]) {
    return `  ${sourceColor(cssInfo)} ${message} (${sourceColor(htmlLocation($el[0]))})`
  } else {
    return `  ${sourceColor(cssInfo)} ${message}`
  }
}

function htmlLocation(el) {
  if (el) {
    if (_htmlSourceLookup) {
      const locationInfo = _htmlSourceLookup(el)
      function getLocationString() {
        if (locationInfo.line !== null && typeof(locationInfo.line) !== 'undefined') {
          return `${_htmlSourcePath}:${locationInfo.line}:${locationInfo.col}`
        } else {
          if (!_hasBeenWarned) {
            console.warn('See the installation instructions about getting a more-precise version of jsdom')
            _hasBeenWarned = true
          }
          const selector = constructSelector(el)
          return `${_htmlSourcePath}:{${selector}}`
        }
      }
      if (locationInfo) {
        // ELements like <body> do not have location information
        const htmlDetails = getLocationString()
        return htmlDetails
      }
    }
    // no lookup info present. It could be an element that was generated by CSS
    // or it could be that JSdom does not know about the element (like <html>)
    if (el.__cssLocation) {
      return cssSnippetToString(el.__cssLocation)
    } else {
      const selector = constructSelector(el)
      return `${_htmlSourcePath}:${selector}`
    }
  } else {
    return 'unknown'
  }
}

function throwError(message, cssSnippet, $el, err) {
  const msg = createMessage(`${errorColor('ERROR')} ${message}`, cssSnippet, $el)
  if (err) {
    _console.error(msg)
    throw err
  } else {
    throw new Error(msg)
  }
}

function throwBug(message, cssSnippet, $el, err) {
  const msg = createMessage(`${errorColor('BUG')} ${message}`, cssSnippet, $el)
  if (err) {
    _console.error(msg)
    throw err
  } else {
    throw new Error(msg)
  }
}

const displayedWarningCache = {} // Only show a warning for a particular source line once. Otherwise it is annoying
function showWarning(message, cssSnippet, $el) {
  const key = `${cssSnippetToString(cssSnippet)} | ${message}`
  if (!displayedWarningCache[key] || _options.verbose) {
    const msg = createMessage(`${warnColor('WARN')}: ${message}`, cssSnippet, $el)
    _console.warn(msg)
    displayedWarningCache[key] = true
  }
}

function showLog(message, cssSnippet, $el) {
  const msg = createMessage(`${logColor('LOG')}: ${message}`, cssSnippet, $el)
  _console.log(msg)
}

module.exports = {init, createMessage, throwError, throwBug, showWarning, showLog, cssSnippetToString, htmlLocation}
